https://practice.geeksforgeeks.org/problems/detect-cycle-in-a-directed-graph/1

import java.util.*;
import java.io.*;
import java.lang.*;

class DriverClass
{
    public static void main (String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        
        while(t-- > 0)
        {
            ArrayList<ArrayList<Integer>> list = new ArrayList<>();
            int V = sc.nextInt();
            int E = sc.nextInt();
            for(int i = 0; i < V+1; i++)
                list.add(i, new ArrayList<Integer>());
            for(int i = 0; i < E; i++)
            {
                int u = sc.nextInt();
                int v = sc.nextInt();
                list.get(u).add(v);
            }
            if(new Solution().isCyclic(V, list) == true)
                System.out.println("1");
            else System.out.println("0");
        }
    }
}// } Driver Code Ends

class Node{
    int first;
    int second;
    Node(int first, int second){
        this.first=first;
        this.second=second;
    }
}

class Solution 
{
    //Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj)
    {
        boolean vis[] = new boolean[V+1];
        boolean dfsvis[] = new boolean[V+1];
        for(int i=0;i<=V;i++){
            if(!vis[i]){
                if(check(adj,i,vis,dfsvis)) return true;
            }
        }
        return false;
    }
    
    public boolean check(ArrayList<ArrayList<Integer>> adj, int i, boolean vis[], boolean dfsvis[]){
        
        vis[i]=true;
        dfsvis[i] = true;
        
        for(int node:adj.get(i)){
            if(!vis[node]){
                if(check(adj,node,vis,dfsvis)) return true;
            }
            else if(dfsvis[node]) return true;
        }
        dfsvis[i]=false;
        return false;
    }
}
